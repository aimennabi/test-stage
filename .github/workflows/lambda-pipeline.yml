on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      
jobs:
  build-deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: false
          installer-parallel: true
      - name: Install dependencies
        run: poetry install --no-interaction
      - name: Lint with Ruff
        run: |
          python -m pip install --upgrade pip
          python -m pip install ruff
          ruff check --output-format=github .
        continue-on-error: true
      - name: Run tests
        run: |
          python -m pip install --upgrade pip
          python -m pip install pytest pytest-cov
          pytest --cov-report term-missing --cov=lambda_app/ tests/
        continue-on-error: true

      
      - name: Build Docker image
        run: |
          docker build -t lambda-app .


      - name: Push Docker image
        run: |
          CLUSTER=lambda-cluster
          CLUSTER_REGISTRY_PORT=5000
          DOCKER_IMAGE=lambda-app
          docker tag $DOCKER_IMAGE localhost:${CLUSTER_REGISTRY_PORT}/$DOCKER_IMAGE
          docker push localhost:${CLUSTER_REGISTRY_PORT}/$DOCKER_IMAGE


      - name: Run Docker container    
        run: |
          docker run -p 3001:8080 lambda-app
      - name: Stop Docker container
        if: always()
        run: docker stop $(docker ps -q --filter ancestor=lambda-app)

      - name: Create k3d cluster and deploy
        run: |
          CLUSTER=lambda-cluster
          CLUSTER_REGISTRY_PORT=5000
          DOCKER_IMAGE=lambda-app
          

          k3d cluster create ${CLUSTER} --registry-create ${CLUSTER}:${CLUSTER_REGISTRY_PORT} -p 3001:8080@loadbalancer
          k3d image import localhost:${CLUSTER_REGISTRY_PORT}/$DOCKER_IMAGE -c lambda-cluster
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          
      - name: Check Lambda function with curl
        run: |
          sleep 10 
          SERVICE_IP="$(kubectl get svc lambda-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"

          echo "Waiting for service IP..."
          sleep 10

          echo "üåê Service is ready at $SERVICE_IP:8080"

          curl -d @events/event.json http://$SERVICE_IP:8080/2015-03-31/functions/function/invocations -o response.json

          if grep -q '"statusCode": 200' response.json; then
            echo "Test passed"
          else
            echo "Test failed"
            exit 1
          fi
          